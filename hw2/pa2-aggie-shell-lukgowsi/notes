command pipelining - output of one command becomes input of next command
    use command vector to create
    refer to lab3a, unnamed pipes, pipe() /dup() /dup2()

output redirection - change stdout to file
    open the file for writing as a file descriptor
    use dup2 to redirect stdout (1) to ^ fd

input redirection - change stdout to file
    open the file for reading as a file descriptor
    use dup2 to redirect stdin (0) from ^ fd

files for redirection are stored in the Command class

handle commands that run background
    return the use prompt to user control until command is done
    use Command->inbackground()
    store pid from fork() in vector of background processes
    before prompting user, iterate over vector to reap processes
    make waitpid() non-blocking for background processes

cd (change directory) use chdir()
    cd -> keep track of previous directory
    use getcwd() 

user prompt - date/time, user name, path of cwd
    getlogin() and getcwd()